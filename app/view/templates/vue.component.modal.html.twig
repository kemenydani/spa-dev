

<!-- template for the modal component -->
<script type="text/x-template" id="modal-template">
    <transition name="modal">
        <div class="modal-mask">
            <div class="modal-wrapper">
                <div class="modal-container" style="{% if width %} width: {{ width }}; {% endif %} {% if height %} height: {{ height }}; {% endif %}">
                    {% verbatim %}
                    <div v-show="loading" class="modal-loading">
                        <i class="fas fa-circle-notch fa-spin"></i>
                        <span ref="modalMessage">{{ loadingMessage }}</span>
                    </div>
                    <div class="modal-header">
                        <slot name="header">
                            default header
                        </slot>
                        <div class="modal-cancel">
                            <i @click="$emit('close')" class="fas fa-times fa-lg"></i>
                        </div>
                    </div>
                    <div class="modal-body">
                        <slot name="body">
                            default body
                        </slot>
                    </div>
                    <div class="modal-footer">
                        <slot name="footer">
                            <button class="modal-default-button" @click="$emit('close')">
                                OK
                            </button>
                        </slot>
                    </div>
                    {% endverbatim %}
                </div>
            </div>
        </div>
    </transition>
</script>
{% verbatim %}

<script>

    (function($, Vue)
    {
	    Vue.component('modal',
	    {
	    	props: {
	    		loadingMessage: '',
                loading: false,
	    	},
	    	watch: {

	    	},
		    template: '#modal-template',
		    beforeCreate : function()
		    {
		    	$('body').addClass('modal-open');
		    },
		    beforeDestroy : function()
		    {
                $('body').removeClass('modal-open');
		    },
		    mounted : function(){
	    	
dragElement(document.getElementById(("thumbs")));

function dragElement(elmnt) {
  var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
  
  /*
  if (document.getElementById(elmnt.id)) {
    document.getElementById(elmnt.id).onmousedown = dragMouseDown;
  } else {
    elmnt.onmousedown = dragMouseDown;
  }
  */
  elmnt.onmousedown  = dragMouseDown;
  elmnt.ontouchstart = dragMouseDown;
  
  function dragMouseDown(e) {
    e = e || window.event;
    // get the mouse cursor position at startup:
    console.log(e)
    
    //do this by checking the event type type=xy instead
    var clientX =  e.hasOwnProperty('clientX') ? e.clientX : e.touches[0].clientX;
    var clientY =  e.hasOwnProperty('clientX') ? e.clientY : e.touches[0].clientY;
    
    pos3 = clientX;
    pos4 = clientY;
    
    document.onmouseup = closeDragElement;
    document.ontouchend = closeDragElement;
    // call a function whenever the cursor moves:
    document.onmousemove = elementDrag;
    document.ontouchmove = elementDrag;
  }

  function elementDrag(e)
  {
    e = e || window.event;
    
    var clientX =  e.hasOwnProperty('clientX') ? e.clientX : e.touches[0].clientX;
    var clientY =  e.hasOwnProperty('clientX') ? e.clientY : e.touches[0].clientY;
    
    // calculate the new cursor position:
    pos1 = pos3 - clientX;
    pos2 = pos4 - clientY;
    pos3 = clientX;
    pos4 = clientY;
    // set the element's new position:
    elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
  }

  function closeDragElement() {
    /* stop moving when mouse button is released:*/
    document.onmouseup = null;
    document.ontouchend = null;
    document.onmousemove = null;
    document.ontouchmove = null;
  }
}
      
		    }
	    });

    }(jQuery, Vue));

</script>

{% endverbatim %}