{% extends 'block.full.html.twig' %}

{% block content %}

{% verbatim %}

<div class="container-full" id="user-profile">
	<div class="container-full route-header profile-route-header">
		<div class="container profile-header-container">
			<div class="username">
				<h1></h1>
				<h3>DANIEL KEMENY</h3>
			</div>
			<div
				class="user-image"
				v-on:click="showModal = true"
				v-bind:style="{ backgroundImage: 'url(' + user.getProfilePicture() + ')' }"></div>
		</div>
	</div>

	<div class="container-full">
		<div class="container container-user-details" style="height: 800px;">
			foo
		</div>
	</div>
	<modal v-if="showModal" v-on:close="showModal = false" id="modal-upload-user-picture">
		<div slot="header">
			<h2>Edit Picture</h2>
		</div>
		<div slot="body">
			<div id="picture-area">
				<div ref="viewport" id="viewport" class="img-container">

				</div>
				<input ref="input" v-on:input="profileImageInput" type="file" class="vanish" id="profile-picture-input">
			</div>
		</div>
		<div slot="footer" style="min-width: 100% !important; display: flex;">
			<button  v-on:click="browse()" style="width: 50%" class="button button-medium button-primary">
				<b>Browse</b>
			</button>
			<button v-on:click="cropUpload()" style="width: 50%" class="button button-medium button-primary">
				<b>Save</b>
			</button>
		</div>
	</modal>
</div>

{% endverbatim %}

{% include 'vue.component.modal.html.twig' with { width: '330px' } %}

<script>

(function($, Vue){

	var User = function(props = {})
	{
		var self = this;
		self.props = props;

		this.getProperty = function(name)
		{
			return self.props.hasOwnProperty(name) ? self.props[name] : null;
		};

		this.getProfilePicture = function(){
			return self.getProperty('profile_picture');
		};

	};

	var __USER__ = {% autoescape false %}{{ user|json_encode }}{% endautoescape %};

	var app = new Vue({
		el: '#user-profile',
		data: function () {
			return {
				user : new User(__USER__),
				showModal: false,
				reader: {}
			}
		},
		methods: {
			browse(){
				this.getFileInput().trigger('click');
			},
			readFile(){

			},
			profileImageInput : function( event )
			{
				if (event.target.files && event.target.files[0])
				{
					$(this.$refs['viewport']).croppie('destroy');
					$(this.$refs['viewport']).croppie({
						enableExif: true,
						viewport: {
							width: 200,
							height: 200,
						},
						boundary: {
							width: 300,
							height: 300
						}
					});

					var reader = new FileReader();

					reader.onload = function (event) {
						$(this.$refs['viewport']).croppie('bind', {
							url: event.target.result
						}).then(function(){
							console.log('jQuery bind complete');
						});
					}
					.bind(this);

					reader.readAsDataURL(event.target.files[0]);
				}
			},
			cropUpload : function()
			{
				$(this.$refs['viewport']).croppie('result', 'blob').then(function(blob)
				{
					this.uploadFile(blob, this.$refs['input'].files[0])
						.then(function(response){
							console.log(response);
						}
						.bind(this));
				}
				.bind(this));
				/*
				this.uploadFile(this.$refs['input'].files[0], $(this.$refs['viewport']).croppie('get'))
					.then(function(response){
						console.log(response);
					}
					.bind(this));
*/
			},
			uploadFile : function(file, name)
			{

				return new Promise(function (resolve, reject) {

					var fd = new FormData;
					fd.append('user_picture', file, name);
					$.ajax({
						url: "/uploadUserPicture",
						type: "POST",
						data:  fd,
						xhr: function ()
						{
							var xhr = new window.XMLHttpRequest();

							xhr.upload.addEventListener("progress", function (evt) {
								if (evt.lengthComputable) {
									var percentComplete = evt.loaded / evt.total;
									percentComplete = parseInt(percentComplete * 100);
									console.log(percentComplete);
									if (percentComplete === 100) {

									}
								}
							}, false);
							return xhr;
						},
						contentType: false,
						processData: false,
						beforeSend: function () {

						},
						success: function (response) {
							resolve(response);
						},
						complete: function (xhr) {

						},
						error: function () {
							reject(false);
						}
					});
				});
			},



			/*
			uploadFile : function(file, options)
			{
				console.log(options)

				return new Promise(function (resolve, reject) {

					var fd = new FormData;
					fd.append('user_picture', file, file.name);
					fd.append('options', JSON.stringify(options));
					$.ajax({
						url: "/uploadUserPicture",
						type: "POST",
						data:  fd,
						xhr: function ()
						{
							var xhr = new window.XMLHttpRequest();

							xhr.upload.addEventListener("progress", function (evt) {
								if (evt.lengthComputable) {
									var percentComplete = evt.loaded / evt.total;
									percentComplete = parseInt(percentComplete * 100);
									console.log(percentComplete);
									if (percentComplete === 100) {

									}
								}
							}, false);
							return xhr;
						},
						contentType: false,
						processData: false,
						beforeSend: function () {

						},
						success: function (response) {
							resolve(response);
						},
						complete: function (xhr) {

						},
						error: function () {
							reject(false);
						}
					});
				});
			},*/
			coverImageInput( event ){
				this.uploadFile( event.target.files, 'cover_picture' ).then(function( filepath ){

				}).catch(function(){

				});
			},



			/*
			uploadFile( files, name ){
				return new Promise(function( resolve, reject ){
					console.log(files[0])
					var firstFile = files[0];
					var fd = new FormData;
					fd.append( name, firstFile, firstFile.name );

					$.ajax({
						url: "/uploadUserPicture",
						type: "POST",
						data:  fd,
						xhr: function() {
							var xhr = new window.XMLHttpRequest();
							xhr.upload.addEventListener("progress", function(evt) {
								if (evt.lengthComputable) {
									var percentComplete = evt.loaded / evt.total;
									percentComplete = parseInt(percentComplete * 100);
									console.log(percentComplete);
									if (percentComplete === 100) {

									}
								}
							}, false);
							return xhr;
						},
						contentType: false,
						processData:false,
						beforeSend: function(){

						},
						success: function(response)
						{
							resolve(response);
						},
						complete: function(xhr) {

						},
						error: function()
						{
							reject(false);
						}
					});
				});
			},
			*/
			getFileInput(){
				return $(this.$el).find('#profile-picture-input');
			}
		},
		created(){

		}
	});

}( jQuery, Vue ));

</script>

<!--
function demoUpload() {
		var $uploadCrop;

		function readFile(input) {
 			if (input.files && input.files[0]) {
	            var reader = new FileReader();

	            reader.onload = function (e) {
					$('.upload-demo').addClass('ready');
	            	$uploadCrop.croppie('bind', {
	            		url: e.target.result
	            	}).then(function(){
	            		console.log('jQuery bind complete');
	            	});

	            }

	            reader.readAsDataURL(input.files[0]);
	        }
	        else {
		        swal("Sorry - you're browser doesn't support the FileReader API");
		    }
		}

		$uploadCrop = $('#upload-demo').croppie({
			viewport: {
				width: 100,
				height: 100,
				type: 'circle'
			},
			enableExif: true
		});

		$('#upload').on('change', function () { readFile(this); });
		$('.upload-result').on('click', function (ev) {
			$uploadCrop.croppie('result', {
				type: 'canvas',
				size: 'viewport'
			}).then(function (resp) {
				popupResult({
					src: resp
				});
			});
		});
	}

	<div class="demo-wrap upload-demo">
                    <div class="container">
                    <div class="grid">
                        <div class="col-1-2">
                            <strong>Upload Example (with exif orientation compatability)</strong>
                            <pre class="language-javascript"><code class="language-javascript">
$uploadCrop = $('#upload-demo').croppie({
    enableExif: true,
    viewport: {
        width: 200,
        height: 200,
        type: 'circle'
    },
    boundary: {
        width: 300,
        height: 300
    }
});</code></pre>
                            <div class="actions">
                                <a class="btn file-btn">
                                    <span>Upload</span>
                                    <input type="file" id="upload" value="Choose a file" accept="image/*" />
                                </a>
                                <button class="upload-result">Result</button>
                            </div>
                        </div>
                        <div class="col-1-2">
                            <div class="upload-msg">
                                Upload a file to start cropping
                            </div>
                            <div class="upload-demo-wrap">
                                <div id="upload-demo"></div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>

-->

{% endblock %}
