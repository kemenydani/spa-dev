{% extends 'block.full.html.twig' %}

{% block content %}

<div class="container-full" id="user-profile">
	<div class="container-full route-header profile-route-header">
		<div class="container profile-header-container">
			<div class="username">
				<h1></h1>
				<h3>DANIEL KEMENY</h3>

			</div>
			<div
				class="user-image"
				{% verbatim %}
				ref="userPicture"
				v-on:click="showModal = true"
				{% endverbatim %}
				style="background-image: url({{ user.requestProfilePicture() }})">
			</div>
		</div>
	</div>

	<div class="container-full">
		<div class="container container-user-details" style="height: 800px;">
			foo
		</div>
	</div>

    {% verbatim %}
	<modal v-if="showModal" v-on:close="showModal = false" v-bind:loading="modalLoading" v-bind:loading-message="modalLoadingMessage" id="modal-upload-user-picture">
		<div slot="header">
			<h2>Edit Picture</h2>
		</div>
		<div slot="body">
			<div id="picture-area" ref="pictureArea" @dragover.prevent="onDragOver" @drop="onDrop">
				<div ref="viewport" id="viewport" @click="viewPortBrowse()" class="img-container">

                </div>
                <div class="hint">
                  CLICK OR DROP
                </div>
				<input ref="input" v-on:input="profileImageInput()" type="file" class="vanish" id="profile-picture-input">
			</div>
		</div>
		<div slot="footer" style="min-width: 100% !important; display: flex;">
			<button  v-on:click="browse()" style="width: 50%" class="button button-medium button-primary">
				<b>Browse</b>
			</button>
			<button v-on:click="cropUpload()" style="width: 50%" class="button button-medium button-primary">
				<b>Save</b>
			</button>
		</div>
	</modal>
	{% endverbatim %}

</div>

{% include 'vue.component.modal.html.twig' with { width: '330px' } %}

<script>

(function($, Vue){

	var user = {% autoescape false %}{{ (user.getFormatted())|json_encode }}{% endautoescape %};

	var app = new Vue({
		el: '#user-profile',
		data: function () {
			return {
				user : user,
				showModal: false,
                modalLoading: false,
                modalLoadingMessage: ''
			}
		},
		methods:
		{
			onDragOver(event){},
			onDrop : function(event){
                event.stopPropagation();
                event.preventDefault();
				this.profileImageInput(event.dataTransfer);
            },
            viewPortBrowse : function()
            {
                if($(this.$refs['viewport']).hasOwnProperty('croppie')) return false;
                this.browse();
            },
			browse : function(){
				$(this.$refs['input']).trigger('click');
			},
			profileImageInput : function( source )
			{
				var input = source || this.$refs['input'];

				if (input.files && input.files[0])
				{
					$(this.$refs['viewport']).croppie('destroy');
					$(this.$refs['viewport']).croppie({
						viewport: { width: 200, height: 200, type: 'circle' },
						boundary: { width: 300, height: 300 }
					});

					var reader = new FileReader();

					reader.onload = function (event)
					{
						$(this.$refs['viewport']).croppie('bind', {
							url: event.target.result
                        });
					}
					.bind(this);

					reader.readAsDataURL(input.files[0]);
				}
			},
			cropUpload : function()
			{
				this.modalLoading = true;
				this.modalLoadingMessage = 'Cutting Image';

				$(this.$refs['viewport']).croppie('result', { type: 'blob', size:'viewport', format: 'jpg', quality: 1, circle: false })
				  .then(function(blob)
				  {
					this.uploadFile(blob, this.$refs['input'].files[0]).then(function(image)
                    {
                        $(this.$refs['userPicture']).css('background-image', 'url(' + image + ')');

	                    this.modalLoadingMessage = 'Profile Updated!';

                        setTimeout(function(){ this.showModal = false; this.modalLoading = false }.bind(this), 2000);
					}
					.bind(this));
				  }
				  .bind(this));
			},
			uploadFile : function(file, name)
			{
				var self = this;

				return new Promise(function (resolve, reject)
				{
					var fd = new FormData;
					fd.append('user_picture', file, name);

					$.ajax({
						url: "/uploadUserPicture",
						type: "POST",
						data:  fd,
						contentType: false,
						processData: false,
						xhr: function ()
						{
							var xhr = new window.XMLHttpRequest();

							xhr.upload.addEventListener("progress", function (evt)
							{
								if (evt.lengthComputable)
								{
									var percentComplete = evt.loaded / evt.total;
									percentComplete = percentComplete * 100;

									self.modalLoadingMessage = 'Uploading ' + parseInt(percentComplete) + '%' ;

									if (percentComplete === 100) {

									}
								}
							}.bind(this), false);

							return xhr;
						},
						beforeSend: function() {
							console.log('beforeSend');
						},
						success: function (response) {
							resolve(response);
						},
						complete: function (xhr) {
							console.log('complete');
						},
						error: function () {
							reject(false);
						}
					});
				});
			}
		}
	});

}( jQuery, Vue ));

</script>

{% endblock %}
