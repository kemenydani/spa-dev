{% extends 'block.full.html.twig' %}

{% block content %}

<div class="container-full route-container" id="route-view-user-profile-view">
	<!-- route header -->
	<div class="container-full route-header profile-route-header">
		<div class="container profile-header-container">
			<div class="user-brand">
				<div
					class="profile-picture circle bordered {% if self %}my-profile-picture{% endif %}"
					v-bind:style="{ backgroundImage : 'url('+model.user.profile_picture+')'}"
					style="background-image: url({{ model.user.profile_picture }})"
					{% if self %}v-on:click="editors.picture.show = true"{% endif %}>
				</div>
				<h1 class="username" v-text="model.user.username">
					{{ model.user.username }}
				</h1>
				<p class="paragraph para-big user-intro" v-if="model.profile.show_bio == 1" v-text="model.profile.bio">{{ model.profile.bio }}</p>
			</div>
			<div class="icons" v-if="model.profile.show_social == 1">
				<a class="icon round" v-bind:href="model.profile[key]" target="_blank" v-if="isSocialItem(key) && model.profile[key].length" v-for="(item, key) in model.profile">
					<i v-bind:class="getSocialIconClass(key)"></i>
				</a>
			</div>
		</div>
	</div>
	
	{% if self %}
		<div class="container-full">
			<div class="container">
				<center><button v-on:click="editors.profile.show = true" class="button button-primary">Edit Profile</button></center>
			</div>
		</div>
	{% endif %}
	
	<!-- bio -->
	<div style="display: none;" class="container-full container-full-user-bio" v-if="model.profile.show_bio == 1">
		<h2 class="section-header" v-text="model.user.username">{{ model.user.username }}'s STORY</h2>
		<div class="container light-bg shadow pad-15 container-user-bio">
			<p class="paragraph para-big" v-text="model.profile.bio">{{ model.profile.bio }}</p>
		</div>
	</div>
	<!--gear -->
	<div class="container-full container-full-user-gear" v-show="model.profile.show_gear == 1">
		<h2 class="section-header">GEAR</h2>
		<div v-if="hasGearItems" class="container container-user-gear">
			<div class="container light-bg shadow pad-15" v-if="isGearItem(key) && model.profile[key].length" v-for="(item, key) in model.profile">
				<span class="type" v-text="formatGearName(key)"></span>
				<span class="name" v-text="model.profile[key]"></span>
			</div>
		</div>
		<div v-else class="container container-user-gear">
			<div class="msg">No items to show.</div>
		</div>
	</div>
	<!-- comments -->
	<div class="container-full container-full-user-comments" v-show="model.profile.show_comments == 1" >
		<h2 class="section-header">LAST COMMENTS</h2>
		<div v-if="model.comments.length > 0" class="container container-user-comments">
			<div class="container light-bg shadow pad-15" v-for="(comment, key) in model.comments">
				<div class="left">
					<span
					  	class="profile-picture circle bordered {% if self %}my-profile-picture{% endif %}"
					  	v-bind:style="{ backgroundImage : 'url('+model.user.profile_picture+')'}"
					  	style="background-image: url({{ model.user.profile_picture }})"></span>
					<span class="comment" v-text="truncateComment(comment.text)"></span>
				</div>
				<div class="datePosted" v-text="formatCommentDate(comment.date_posted)"></div>
			</div>
		</div>
		<div v-else class="container container-user-comments">
			<div class="msg">There are no comments to show.</div>
		</div>
	</div>
	{% if self %}
	{% verbatim %}
	<!-- modal profile data -->
	<modal-profile-editor
		v-bind:model="model"
		v-bind:show="editors.profile.show"
		v-bind:width="'1000px'"
		v-bind:height="'700px'"
		v-on:success="setModel"
		v-on:close="editors.profile.show = false">
	</modal-profile-editor>
	<!-- modal profile pic -->
	<modal-profile-picture-editor
		v-bind:show="editors.picture.show"
		v-bind:width="'400px'"
		v-bind:height="'500px'"
		v-on:close="editors.picture.show = false">
	</modal-profile-picture-editor>
	{% endverbatim %}
	{% endif %}
</div>
{% if self %}
{% verbatim %}
<script type="text/x-template" id="template-modal-profile-editor">
	<modal
		id="modal-edit-profile"
		v-if="show"
		v-on:close="$emit('close', show = !show)"
		v-on:open="opened"
		v-bind:width="width"
		v-bind:height="height"
		v-bind:loading="loading"
		v-bind:loading-message="message">
		<div slot="header">
			<h1>Edit Profile</h1>
		</div>
		<div slot="body" class="body">
			<form id="app-profile-editor" ref="form">
				<section class="field-section general-fields">
					<h2>General Information</h2>
					<div class="input-field" v-bind:class="{ invalid : errors.email }">
						<input
							placeholder="Email"
							type="email"
							name="email"
							autocomplete="on"
							v-model="data.user.email"
							required
						/>
						<span class="field-info">{{ errors.email }}</span>
					</div>
					<div class="input-field" v-bind:class="{ invalid : errors.country_name }">
						<input
							placeholder="Type your country name"
							type="text"
							name="country_code"
							autocomplete="off"
							v-model="data.user.country_name"
							v-on:blur="chooseFirstPrediction"
							v-on:keyup.enter="chooseFirstPrediction"
							v-on:input="searchCountry"
							required
						/>
						<div class="country-predictions" v-if="form.countryPredictions.length">
							<div v-on:click="choosePrediction(country)" class="country-prediction" v-text="country.name" v-for="(country, key) in form.countryPredictions"></div>
						</div>
						<span class="field-info">{{ errors.country_name }}</span>
					</div>
					<div class="input-field" v-bind:class="{ invalid : errors.bio }" >
						<textarea
							placeholder="Short Introduction / Motto"
							type="text"
							name="bio"
							autocomplete="on"
							v-model="data.profile.bio"
							rows="2"
							maxlength="200"
						>
						</textarea>
						<span class="field-info">
							<span style="color: #666">{{ 200 - data.profile.bio.length }} / 200 </span>
							{{ errors.bio }}
						</span>
					</div>
					<div class="input-field">
						<label class="checkbox-wrap"> <b>Show Introduction</b>
							<input type="checkbox" true-value="1" false-value="0" v-model="data.profile.show_bio">
							<span class="checkmark"></span>
						</label>
					</div>
				</section>
				<!-- social -->
				<section class="field-section social-section">
					<h2>Social Networks</h2>
					<div class="input-field">
						<input
							placeholder="Facebook Link"
							type="text"
							name="social_facebook"
							autocomplete="on"
							v-model="data.profile.social_facebook"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<input
							placeholder="Twitch Link"
							type="text"
							name="social_twitch"
							autocomplete="on"
							v-model="data.profile.social_twitch"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<input
							placeholder="Youtube Link"
							type="text"
							name="social_youtube"
							autocomplete="on"
							v-model="data.profile.social_youtube"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<input
							placeholder="Twitter Link"
							type="text"
							name="social_twitter"
							autocomplete="on"
							v-model="data.profile.social_twitter"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<label class="checkbox-wrap"> <b>Show Social Links</b>
							<input type="checkbox" true-value="1" false-value="0" v-model="data.profile.show_social">
							<span class="checkmark"></span>
						</label>
					</div>
				</section>
				<!-- gear -->
				<section class="field-section gear-section">
					<h2>Gear</h2>
					<div class="input-field">
						<input
							placeholder="Mouse"
							type="text"
							name="social_facebook"
							autocomplete="on"
							v-model="data.profile.gear_mouse"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<input
							placeholder="Keyboard"
							type="text"
							name="social_twitch"
							autocomplete="on"
							v-model="data.profile.gear_keyboard"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<input
							placeholder="Headset"
							type="text"
							name="social_youtube"
							autocomplete="on"
							v-model="data.profile.gear_headset"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<input
							placeholder="VGA"
							type="text"
							name="social_twitter"
							autocomplete="on"
							v-model="data.profile.gear_vga"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<input
							placeholder="Processor"
							type="text"
							name="social_twitter"
							autocomplete="on"
							v-model="data.profile.gear_processor"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<input
							placeholder="Chair"
							type="text"
							name="social_twitter"
							autocomplete="on"
							v-model="data.profile.gear_chair"
						/>
						<span class="field-info"></span>
					</div>
					<div class="input-field">
						<label class="checkbox-wrap"> <b>Show Gear</b>
							<input type="checkbox" true-value="1" false-value="0" v-model="data.profile.show_gear">
							<span class="checkmark"></span>
						</label>
					</div>
					<div class="input-field">
						<label class="checkbox-wrap"> <b>Show Comments</b>
							<input type="checkbox" true-value="1" false-value="0" v-model="data.profile.show_comments">
							<span class="checkmark"></span>
						</label>
					</div>
				</section>
			</form>
		</div>
		<div slot="footer" style="min-width: 100%">
			<button v-on:click="onSubmitProfileEdit" style="width: 100%" class="button button-medium button-primary">
				<b>Save</b>
			</button>
		</div>
	</modal>
</script>
{% endverbatim %}

{% verbatim %}
<script type="text/x-template" id="template-modal-profile-picture-editor">
	<modal
		id="modal-upload-profile-picture"
		v-if="show"
		ref="modal"
		v-on:close="$emit('close', show = !show)"
		v-bind:width="width"
		v-bind:height="height"
		v-bind:loading="loading"
		v-bind:loading-message="message">
		<div slot="header">
			<h1>Edit Picture</h1>
		</div>
		<div slot="body">
			<div id="picture-area" ref="pictureArea" @dragover.prevent="" @drop.stop.prevent="onFileInput">
				<div ref="viewport" id="viewport" @click="browseFileSystem('viewport')" class="img-container"></div>
                <div class="hint">CLICK OR DROP</div>
				<input ref="input" v-on:input="onFileInput" type="file" class="vanish" id="profile-picture-input"/>
			</div>
		</div>
		<div slot="footer">
			<button
				class="button button-medium button-primary"
				type="button"
				v-on:click="browseFileSystem">
				Browse
			</button>
			<button
				class="button button-medium button-primary"
				type="button"
				v-bind:class="{ disabled : cropper.instance === null }"
				v-on:click="uploadCroppedResult()">
				Save
			</button>
		</div>
	</modal>
</script>
{% endverbatim %}

{% include 'vue.component.modal.html.twig' %}
{% endif %}
<script>

(function(Vue){
	
	{% if self %}
	Vue.component('modal-profile-editor', {
		template: '#template-modal-profile-editor',
		props: {
			show : false,
		  	width : null,
		  	height: null,
		  	loading: false,
		  	message : '',
			model : {
				user    : {},
				profile : {
					'id' : null,
					'user_id' : null,
					'show_bio' : null,
					'bio' : null,
					'show_gear' : null,
					'show_social' : null,
					'show_comments' : null,
					'social_facebook' : null,
					'social_twitter' : null,
					'social_twitch' : null,
					'social_youtube' : null,
					'gear_mouse' : null,
					'gear_keyboard' : null,
					'gear_headset' : null,
					'gear_vga' : null,
					'gear_processor' : null,
					'gear_chair': null,
				},
				comments: []
			},
		},
		data: function () {
			return {
				data : JSON.parse(JSON.stringify(this.model)),
				errors : {},
				form : {
					countryPredictions : []
				}
			}
		},
		computed :
		{
			social : function()
			{
				return Object.keys(this.data.profile).filter(function( v )
				{
					return v.indexOf('social_') !== -1;
				})
			},
			gear : function()
			{
				return Object.keys(this.data.profile).filter(function( v )
				{
					return v.indexOf('gear_') !== -1;
				})
			},
		},
	  	methods: {
		  	opened : function()
		  	{
		  		this.form.countryPredictions = [];
		  		this.errors = {};
			  	this.data = JSON.parse(JSON.stringify(this.model))
		  	},
			searchCountry : function(event)
			{
				fetch('/country/find/?string=' + event.target.value)
				  	.then(function(response){ return response.json(); })
					.then(function(json)
					{
						this.form.countryPredictions = [];
						Object.keys(json).forEach(function( key, index )
						{
							if(index > 5) return false;
							this.form.countryPredictions.push({ 'code': key, 'name' : json[key]})
						}
						.bind(this))
					}
					.bind(this))
			},
			choosePrediction : function(country)
			{
				this.data.user.country_code = country.code;
				this.data.user.country_name = country.name;
				this.form.countryPredictions = [];
			},
			chooseFirstPrediction : function()
			{
				if(this.form.countryPredictions.length)
				{
					this.data.user.country_code = this.form.countryPredictions[0].code;
					this.data.user.country_name = this.form.countryPredictions[0].name;
					this.form.countryPredictions = [];
				}
			},
		  	closeEditor : function()
			{
				this.show = false;
				this.errors = {};
			  	this.$emit('close', this.show);
			  	this.message = null;
			  	this.loading = false;
			},
		    onSubmitProfileEdit : function()
			{
				if(typeof this.$refs['form'].checkValidity === 'function'){
					if(!this.$refs['form'].checkValidity()) {
						this.$refs['form'].reportValidity();
						return false;
					}
				}
				this.errors = {};
				this.loading = true;
				this.message = 'Saving';
				
				this.data.token = "{{ token }}";
				
			  	fetch('/user/updateProfile?userId=' + this.data.user.id,
				{
			  		method : 'POST',
				  	body : JSON.stringify(this.data),
					credentials: 'same-origin',
					headers: { 'content-type': 'application/json' },
			  	})
				.then(function(response)
				{
					return response.json();
				}
				.bind(this))
				.then(function(json)
				{
					if(json.hasOwnProperty('errors')) return { success : false, 'json' : json.errors };
					if(json.hasOwnProperty('model'))  return { success : true,  'json' : json.model };
					return new Error('Server Error');
				}
				.bind(this))
			  	.then(function(state)
				{
					if(state.success)
					{
						this.message = 'Profile Saved!';
						setTimeout(function(){
							this.$emit('success', this.data = state.json);
							this.closeEditor();
						}.bind(this), 3000);
					}
					else
					{
						this.errors = state.json;
						this.message = 'Failed to save!';
						setTimeout(function() { this.loading = false; }.bind(this), 3000);
					}
				}
				.bind(this))
			  	.catch(function(json)
				{
				
				})
			},
		}
	});
	
	Vue.component('modal-profile-picture-editor', {
		template : '#template-modal-profile-picture-editor',
	  	components : ['modal'],
		props : {
			show : false,
			width : null,
			height: null,
			loading: false,
			message : '',
		},
	  	data : function(){
			return {
				cropper : {
					instance : null,
				  	config : {
					  	result : { type: 'blob', size:'viewport', format: 'jpg', quality: 1, circle: false },
					  	viewport : {
						  	viewport: { width: 200, height: 200, type: 'circle' },
						  	boundary: { width: 300, height: 300 }
					  	}
					}
				}
			}
		},
	  	methods :
		{
			closeEditor : function()
			{
				this.cropper.instance = null;
				this.$emit('close', this.show = !this.show);
				this.message = null;
				this.loading = false;
			},
			onFileInput : function(event)
			{
				var fileList = [];
				
				if(event.type === 'input') fileList = event.target.files;
				if(event.type === 'drop')  fileList = event.dataTransfer.files;

				if(fileList.length)
				{
					if(this.cropper.instance !== null) this.cropper.instance.destroy();
					this.cropper.instance = new Croppie(this.$refs['viewport'], this.cropper.config.viewport);
	
					if(!this.cropper.instance) return false;
					
					var reader = new FileReader();
					
					reader.onload = function(event)
					{
						this.cropper.instance.bind({ url: event.target.result });
					}
					.bind(this);
					
					reader.readAsDataURL(fileList[0]);
				}
			},
			uploadCroppedResult : function()
			{
				if(this.cropper.instance === null) return false;
				
				this.loading = true;
				this.message = 'Cutting Image';
				
				this.cropper.instance.result(this.cropper.config.result)
					.then(function(blob)
					{
						this.uploadFile(blob, 'file')
							.then(function(croppedImage)
							{
								window.appEventBus.$emit('userPictureChanged', croppedImage);
								this.message = 'Profile Updated!';
								setTimeout(this.closeEditor.call(this), 3000);
							}
							.bind(this));
					}
					.bind(this));
			},
			uploadFile : function(file, name)
			{
				return new Promise
				(
					function(resolve, reject)
					{
						var formData = new FormData();
						
						formData.append('user_picture', file, name);
						
						this.postUploadFormData(formData)
							.then(function(response) { resolve(response); })
							.catch(function(error) { reject(error); });
					}
					.bind(this)
				);
			},
			postUploadFormData(formData)
			{
			  	return new Promise(function(resolve, reject)
				{
					var xhr = new XMLHttpRequest();
			
					xhr.onload = function()
					{
						if (xhr.status === 200) { resolve(xhr.response); }
						else { reject(Error(xhr.statusText)); }
					};
					
					xhr.upload.addEventListener('progress', function (uploadEvent)
					{
						if (uploadEvent.lengthComputable)
						{
							this.message = 'Uploading ' + ((uploadEvent.loaded / uploadEvent.total) * 100) + '%';
						}
					}
					.bind(this), false);
				 
					xhr.onerror = function() { reject(Error("Network Error")); };
					
					xhr.open('POST', '/uploadUserPicture');
					xhr.send(formData);
				}
				.bind(this));

			},
			browseFileSystem : function( loc )
			{
				if(loc === 'viewport' && this.cropper.instance !== null) return false;
				this.$refs['input'].click();
			}
		}
	});
	{% endif %}
	new Vue({
		el: '#route-view-user-profile-view',
		data: function ()
        {
			return {
				editors : {
					profile : {
						show : false
					},
				  	picture : {
						show : false
					}
				},
				model : {{ model|json_encode|raw }},
			}
		},
	  	computed : {
			 hasGearItems : function ()
			 {
			 	var has = false;
			 	
			   	Object.keys(this.model.profile).forEach(function(k){
			   		if(k.indexOf('gear_') !== -1 ) {
						if(this.model.profile[k].length) has = true;
					}
				}
				.bind(this));

			   	return has;
			 }
		},
	  	methods : {
			setModel : function( model )
			{
				this.model = model;
			},
		  	formatCommentDate(string)
			{
				if(!window.Date) return string;
				var date = new Date(string);
				var months = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "June", "July", "Aug.", "Sep..", "Oct.", "Nov.", "Dec."];
				return date.getDay() + ' ' + months[date.getMonth()] + ' ' + date.getFullYear();
			},
			truncateComment : function(text)
			{
				if(text.length > 40) return text.substring(0, 40) + '...';
				return text;
			},
			formatGearName : function(name){
				return name.replace('gear_', '');
			},
		  	isGearItem : function(key)
			{
				return key.indexOf('gear_') !== -1;
			},
		  	isSocialItem : function(key)
			{
			  	return key.indexOf('social_') !== -1;
		  	},
		  	getSocialIconClass : function(key)
			{
				return 'fab fa-lg fa-' + key.split("social_").pop();
			}
		},
	});

}( window.Vue ));

</script>

{% endblock %}
