{% extends 'block.full.html.twig' %}

{% block content %}

<div class="container-full" id="user-profile">
	<div class="container-full route-header profile-route-header">
		<div class="container profile-header-container">
			<div class="username">
				<h1></h1>
				<h3>DANIEL KEMENY</h3>

			</div>
			<div
				class="user-image my-user-picture"
				{% verbatim %}
				v-on:click="show = true"
				{% endverbatim %}
				style="background-image: url({{ user.requestProfilePicture() }})">
			</div>
		</div>
	</div>

	<div class="container-full">
		<div class="container container-user-details" style="height: 800px;">
			foo
		</div>
	</div>

    {% verbatim %}
	<modal v-if="show" v-on:close="show = false" v-bind:loading="loading" v-bind:loading-message="message" id="modal-upload-user-picture">
		<div slot="header">
			<h2>Edit Picture</h2>
		</div>
		<div slot="body">
			<div id="picture-area" ref="pictureArea" @dragover.prevent="" @drop.stop.prevent="onDrop">
				<div ref="viewport" id="viewport" @click="viewPortBrowse()" class="img-container">

                </div>
                <div class="hint">
                  CLICK OR DROP
                </div>
				<input ref="input" v-on:input="profileImageInput()" type="file" class="vanish" id="profile-picture-input">
			</div>
		</div>
		<div slot="footer" style="min-width: 100% !important; display: flex;">
			<button  v-on:click="browse()" style="width: 50%" class="button button-medium button-primary">
				<b>Browse</b>
			</button>
			<button v-on:click="cropUpload()" style="width: 50%" class="button button-medium button-primary">
				<b>Save</b>
			</button>
		</div>
	</modal>
	{% endverbatim %}

</div>

{% include 'vue.component.modal.html.twig' with { width: '330px' } %}

<script>

(function($, Vue){

	new Vue({
		el: '#user-profile',
		data: function ()
        {
			return {
				show: false,
                loading: false,
                message: '',
                cropResultConfig : { type: 'blob', size:'viewport', format: 'jpg', quality: 1, circle: false },
                cropViewPortConfig : {
	                viewport: { width: 200, height: 200, type: 'circle' },
	                boundary: { width: 300, height: 300 }
                },
                api: 'uploadUserPicture',
			}
		},
		methods:
		{
			profileImageInput : function( inputEl )
			{
				var input = inputEl || this.getInput().get(0);
                var firstFile = input.files[0];

				if ( firstFile )
				{
					this.getViewPort()
                      .croppie('destroy')
                      .croppie(this.cropViewPortConfig);

					var fileReader = new FileReader();

					fileReader.onload = function( imageLoadedEvent )
					{
						this.getViewPort().croppie('bind', { url: imageLoadedEvent.target.result });
					}
					.bind(this);

					fileReader.readAsDataURL( firstFile );
				}
			},
			cropUpload : function()
			{
				this.setLoading();
				this.printMessage('Cutting Image');

				this.getViewPort().croppie( 'result', this.cropResultConfig )
				  .then(function( blob )
                  {
                    this.uploadFile( blob, 'file' )
                        .then(function( croppedImage )
                        {
                            this.notifyApp( 'userPictureChanged', croppedImage );
                            this.printMessage( 'Profile Updated!' );
                            this.hideUnloadModal( 2000 );
                        }
                        .bind(this));
                  }
                  .bind(this)
                );
			},
			uploadFile : function( file, name )
			{
				return new Promise
                (
					function ( resolve, reject )
				    {
				    	var formData = new FormData;
                        formData.append( 'user_picture', file, name );

                        this.ajaxUpload( formData )
                            .then(function( response ) { resolve( response ); })
                            .catch( function( error ) { reject( error ); });
                    }
                    .bind(this)
                );
			},
            ajaxUpload( formData )
            {
            	console.log(formData)
	            return $.ajax(
                {
		            url: '/' + this.api,
                    method: 'POST',
		            data: formData,
		            contentType: false,
		            processData: false,
		            xhr: function () { return this.printUploadProgress(); }.bind(this)
	            });
            },
            printUploadProgress : function()
            {
                var xhr = new window.XMLHttpRequest();

                xhr.upload.addEventListener( "progress", function ( uploadEvent )
                {
                    if ( uploadEvent.lengthComputable )
                    {
                        this.printMessage(
                        	function( loaded, total )
                            {
                                return 'Uploading ' + this.printProgress( loaded, total );
                            }
                            .call(this, uploadEvent.loaded, uploadEvent.total)
                        );
                    }
                }
                .bind(this), false);

                return xhr;
            },
            onDrop : function( fileDropEvent )
            {
                this.profileImageInput( fileDropEvent.dataTransfer );
            },
            viewPortBrowse : function()
            {
                if(this.getViewPort().hasOwnProperty('croppie')) return false;
                this.browse();
            },
            browse : function()
            {
                this.getInput().trigger('click');
            },
            getViewPort : function()
            {
            	return $(this.$refs['viewport']);
            },
            getInput : function()
            {
                return $(this.$refs['input']);
            },
            printMessage : function( message )
            {
				this.message = message;
            },
            setLoading : function()
            {
	            this.loading = true;
            },
            printProgress : function( loaded, total )
            {
				return Math.round( ( loaded / total ) * 100 )  + '%'
            },
            hideUnloadModal : function( timeout )
            {
	            setTimeout(function(){ this.show = false; this.loading = false }.bind(this), timeout || 0);
            },
            notifyApp : function ( event, image )
            {
	            window.appEventBus.$emit( event, image );
            }
		}
	});

}( jQuery, Vue ));

</script>

{% endblock %}
