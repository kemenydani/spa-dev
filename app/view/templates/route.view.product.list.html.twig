{% extends 'block.full.html.twig' %}

{% block content %}
    <div class="container-full route-container" id="route-view-product-list">
		<div class="container-full route-header product-list-route-header">
			<div class="body">
				<div class="container squad-header-container">
					<h2 class="title">AVENUE SHOP</h2>
				</div>
			</div>
			<div class="bg-image" style="background-image: url(static/images/route_header.jpg)"></div>
		</div>
        {% verbatim %}
        <div class="container product-list-container infinite-list-container" id="product-list">
            <div class="infinite-search">
                <div class="info">Loaded {{ products.length }} from totalItems {{ totalItems }} products</div>
                <div class="form">
                    <div class="input-field">
                        <select v-model="searchParams.orderBy" v-on:change="search">
                          <option value="name|asc">Ascending by name</option>
                          <option value="name|desc">Descending by name</option>
                          <option value="price|asc">Ascending by price</option>
                          <option value="price|desc">Descending by price</option>
                          <option value="id|asc">Ascending by id</option>
                          <option value="id|desc">Descending by id</option>
                          <option value="date|asc">Ascending by date</option>
                          <option value="date|desc">Descending by date</option>
                        </select>
                    </div>
                    <div class="input-field">
                        <input
                            v-on:keyup.enter="search()"
                            v-model="searchParams.name"
                            placeholder="Search for product"
                            type="text">
					</div>
					<button class="button button-primary" v-on:click="search()">SEARCH</button>
                </div>
            </div>
            <br>
            <div class="product-flex">
                <article v-for="(product, key) in products" v-bind:key="key" class="product">
                    <a class="image" style="display: block" v-bind:href="'product/' + product.id "
                       v-bind:style="{ 'background-image': 'url(' + product.image + ')' }">
                    </a>
                    <div class="foot">
                          <div class="name"><h2><a v-bind:href="'product/' + product.id ">{{ product.name }}</a></h2></div>
                          <div class="price">{{ product.price }} {{ product.currency }}</div>
                      </div>
                </article>
            </div>
            <div v-if="loading" class="infinite-loading">
              <i v-if="loading" class="fas fa-4x fa-circle-notch fa-spin"></i>
			</div>
			<div v-if="totalItems > products.length" class="infinite-more">
			  There are {{ totalItems - products.length }} more products...
			</div>
        </div>
        {% endverbatim %}
    </div>

    <script type="text/javascript">

        (function($, Vue){
            
            new Vue({
                el: '#product-list',
                data: function () {
                    return {
                        products: [],
                        totalItems: 0,
                        limit: parseInt({{ limit }}),
                        startAt: 0,
                        loading: false,
                        searchParams : {
                            name: '',
                            orderBy : 'name|asc'
                        }
                    }
                },
                methods: {
                    toggleproductInfo : function( event )
                    {
                        $(event.currentTarget).parent().find('.block-info').slideToggle("fast");
                    },
                    bottomVisible : function()
                    {
	                    var wh = window.innerHeight;
	                    var b =  this.$el.getBoundingClientRect().bottom;
	                    var spaceBelow = wh - b;
	                    return spaceBelow > -100;
                    },
	                fetchData : function()
	                {
		                this.loading = true;
		
		                return new Promise(function(resolve, reject)
		                {
		                	var queryString = '?startAt=' + this.startAt + '&search=' + this.searchParams.name + '&order=' + this.searchParams.orderBy;

			                fetch('/product/loadInfinity/'+ queryString )
				                .then(function(response)
				                {
					                if(!response.ok) throw new Error('Bad request: Unable to load products.');
					                resolve(response.json());
				                })
				                .catch(function(error)
				                {
					                reject(error)
				                })
				                .finally(function()
				                {
					                this.loading = false;
				                }
					            .bind(this));
		                }
			            .bind(this));
	                },
	                fetchMore : function( )
	                {
		                return this.fetchData().then(this.handleResponse);
	                },
	                handleResponse : function( response )
	                {
		                this.totalItems = response.totalItems ? response.totalItems : 0;
		                this.pushProducts( response.products || [] );
		                this.startAt += this.limit;
	                },
	                pushProducts : function( products )
	                {
		                products.forEach(function( url )
		                {
			                this.products.push( url )
		                }
			            .bind(this));
	                },
	                search : function()
	                {
		                this.startAt = 0;
		                this.totalItems = 0;
		                this.fetchData()
			                .then(function( response )
			                {
				                this.totalItems = response.totalItems ? response.totalItems : 0;
				                this.products = response.products || [];
				                this.startAt += response.products.length
			                }
				            .bind(this));
	                }
                    
                },
                created: function()
                {
                	this.handleResponse({{ products|raw }});

                    window.addEventListener('scroll', function()
                    {
                        if(this.bottomVisible() === true && this.loading === false)
                        {
                            if(this.totalItems > this.products.length)
                            {
                                this.fetchMore();
                            }
                        }
                    }.bind(this));
                },
            });

        }(jQuery, Vue));

    </script>
{% endblock %}
