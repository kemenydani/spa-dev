{% extends 'block.full.html.twig' %}

{% block content %}
    <div class="container-full route-container" id="route-view-award-list">
        {% verbatim %}
        <div class="container award-list-container infinite-list-container" id="award-list">
            <div class="infinite-search">
                <div class="info">Loaded {{ awards.length }} from total {{ totalItems }} awards</div>
                <div class="form">
					<input v-on:keyup.enter="search()" v-model="searchParam" placeholder="Search" type="text">
					<button v-on:click="search()">SEARCH</button>
                </div>
            </div>
            <article v-for="(award, key) in awards" v-bind:key="key" class="award">
                <section v-on:click="toggleAwardInfo" class="top-info">
					<div class="left">
					  <div class="place" v-bind:class="{ prominent : (award.place == 1 || award.place == 2 || award.place == 3) }">
						  <span class="num">{{ award.place }}</span>
						  <i v-if="(award.place == 1 || award.place == 2 || award.place == 3)" class="fas fa-trophy"></i>
					  </div>
					  <h2 class="event_name">{{ award.event_name }}</h2>
					</div>
					<div class="right">
					  {{ award.award_date }}
					</div>
				</section>
				<section class="block-info">
					<a v-bind:href="'/squad/' + award.squad_name" v-if="award.squad_header" class="award-squad">
						<h2 class="title">{{ award.squad_name }}</h2>
						<div class="bg-image" v-bind:style="{ backgroundImage : 'url('+award.squad_header+')' }"></div>
					</a>
                    <div v-if="award.matches.length" class="match" v-for="(match, key) in award.matches" v-bind:key="key">
                      <div class="left">
                          <div class="date">{{ match.date_played }}</div>
                          <div class="name">{{ match.enemy_team_name }}</div>
                      </div>
                      <div class="right">
                          <div class="score">
                              <span class="score_home">{{ match.home_score }}</span>
                               :
                              <span class="score_enemy">{{ match.enemy_score }}</span>
                          </div>
                      </div>
                    </span>
                  </section>
            </article>
            <div v-if="loading" class="infinite-loading">
              <i v-if="loading" class="fas fa-4x fa-circle-notch fa-spin"></i>
			</div>
			<div v-if="totalItems > awards.length" class="infinite-more">
			  There are {{ totalItems - awards.length }} more awards...
			</div>
        </div>
        {% endverbatim %}
    </div>

    <script type="text/javascript">

		(function(Vue){
			new Vue({
				el: '#award-list',
				data: function () {
					return {
						awards: [],
						totalItems: 0,
						limit: parseInt({{ limit }}),
						startAt: 0,
					  	loading: false,
                        searchParam : ''
					}
				},
				methods: {
					toggleAwardInfo : function( event )
					{
						$(event.currentTarget).parent().find('.block-info').slideToggle("fast");
					},
					bottomVisible : function()
                    {
	                    var wh = window.innerHeight;
	                    var b =  this.$el.getBoundingClientRect().bottom;
	                    var spaceBelow = wh - b;
	                    return spaceBelow > -100;
					},
					fetchData : function()
					{
						this.loading = true;

						return new Promise(function(resolve, reject)
						{
							fetch('/award/loadInfinity/?startAt=' + this.startAt + '&search=' + this.searchParam )
								.then(function(response)
								{
									if(!response.ok) throw new Error('Bad request: Unable to load awards.');
									resolve(response.json());
								})
								.catch(function(error)
								{
									reject(error)
								})
								.finally(function()
								{
									this.loading = false;
								}
								.bind(this));
						}
						.bind(this));
					},
					fetchMore : function( )
					{
						return this.fetchData().then(this.handleResponse);
					},
					handleResponse : function( response )
					{
						this.totalItems = response.totalItems ? response.totalItems : 0;
						this.pushArticles( response.awards || [] );
						this.startAt += this.limit;
					},
					pushArticles : function( awards )
					{
						awards.forEach(function( award )
						{
							this.awards.push( award )
						}
						.bind(this));
					},
					search : function()
					{
						this.startAt = 0;
						this.totalItems = 0;
						this.fetchData()
							.then(function( response )
							{
								this.totalItems = response.totalItems ? response.totalItems : 0;
								this.awards = response.awards || [];
								this.startAt += response.awards.length
							}
							.bind(this));
					}
				},
				created: function()
                {
	                this.handleResponse({{ awards|raw }});

					window.addEventListener('scroll', function()
					{
						if(this.bottomVisible() === true && this.loading === false)
						{
							if(this.totalItems > this.awards.length)
							{
								this.fetchMore();
							}
                        }
					}.bind(this));
				}
			});
		}(Vue));
    </script>

{% endblock %}