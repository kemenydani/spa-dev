{% extends 'block.full.html.twig' %}

{% block content %}
    <div class="container-full route-container" id="route-view-match-list">
		<div class="container-full route-header match-list-route-header">
			<div class="body">
				<div class="container match-list-header-container">
						<h2 class="title">MATCHES</h2>
				</div>
			</div>
			<div class="bg-image" style="background-image: url(static/images/route_header.jpg)"></div>
		</div>
        {% verbatim %}
        <div class="container match-list-container infinite-list-container" id="match-list">
            <div class="infinite-search">
                <div class="info">Loaded {{ matches.length }} from totalItems {{ totalItems }} matches</div>
                <div class="form">
					<input v-on:keyup.enter="search()" v-model="searchParam" placeholder="Search for squad, game, or enemy team" type="text">
					<button v-on:click="search()">SEARCH</button>
                </div>
            </div>
            <article v-for="(match, key) in matches" v-bind:key="key" class="match">
                  <section v-on:click="toggleMatchInfo" class="inline-info">
                      <div class="left">
                          <span class="game">{{ match.game_name_short }}</span>
                          <span class="vs"> vs. </span>
                          <span class="enemy-name">{{ match.enemy_name }}</span>
                      </div>
                      <div class="right">
                          <span class="score">
                              <span class="score-home">{{ match.csh}}</span>
                               :
                              <span class="score-enemy">{{ match.cse }}</span>
                          </span>
                      </div>
                  </section>
                  <section class="block-info">
                    <div class="map" v-for="(map, key) in match.maps" v-bind:key="key">
                      <div class="left">
                          <span class="name">{{ map.name }}</span>
                      </div>
                      <div class="right">
                          <span class="score">
                              <span class="score_home">{{ map.score_home }}</span>
                               :
                              <span class="score_enemy">{{ map.score_enemy }}</span>
                          </span>
                      </div>
                    </span>
                  </section>
            </article>
            <div v-if="loading" class="infinite-loading">
              <i v-if="loading" class="fas fa-4x fa-circle-notch fa-spin"></i>
			</div>
			<div v-if="totalItems > matches.length" class="infinite-more">
			  There are {{ totalItems - matches.length }} more matches...
			</div>
        </div>
        {% endverbatim %}

    </div>

    <script type="text/javascript">

    (function($, Vue){

         new Vue({
            el: '#match-list',
            data: function () {
                return {
                    matches: [],
                    totalItems: 0,
                    limit: parseInt({{ limit }}),
                    startAt: 0,
                    loading: false,
                    searchParam : ''
                }
            },
            methods: {
            	toggleMatchInfo : function( event )
                {
		            $(event.currentTarget).parent().find('.block-info').slideToggle("fast");
                },
                bottomVisible : function()
                {
	                var wh = window.innerHeight;
	                var b =  this.$el.getBoundingClientRect().bottom;
	                var spaceBelow = wh - b;
	                return spaceBelow > -100;
                },
	            fetchData : function()
	            {
		            this.loading = true;

		            return new Promise(function(resolve, reject)
		            {
			            fetch('/match/loadInfinity/?startAt=' + this.startAt + '&search=' + this.searchParam)
				            .then(function(response)
				            {
					            if(!response.ok) throw new Error('Bad request: Unable to load matches.');
					            resolve(response.json());
				            })
				            .catch(function(error)
				            {
					            reject(error)
				            })
				            .finally(function()
				            {
					            this.loading = false;
				            }
					        .bind(this));
		            }
			        .bind(this));
	            },
	            fetchMore : function( )
	            {
		            return this.fetchData().then(this.handleResponse);
	            },
	            handleResponse : function( response )
	            {
		            this.totalItems = response.totalItems ? response.totalItems : 0;
		            this.pushMatches( response.matches || [] );
		            this.startAt += this.limit;
	            },
	            pushMatches : function( items )
	            {
		            items.forEach(function( item )
		            {
			            this.matches.push( item )
		            }
			        .bind(this));
	            },
	            search : function()
	            {
		            this.startAt = 0;
		            this.totalItems = 0;
		            this.fetchData()
			            .then(function( response )
			            {
				            this.totalItems = response.totalItems ? response.totalItems : 0;
				            this.matches = response.matches || [];
				            this.startAt += response.matches.length
			            }
				        .bind(this));
	            }
            },
	         created: function()
	         {
		         this.handleResponse({{ matches|raw }});

		         window.addEventListener('scroll', function()
		         {
			         if(this.bottomVisible() === true && this.loading === false)
			         {
				         if(this.totalItems > this.matches.length)
				         {
					         this.fetchMore();
				         }
			         }
		         }
			     .bind(this));
	         }
         });

    }(jQuery, Vue));

    </script>
{% endblock %}
