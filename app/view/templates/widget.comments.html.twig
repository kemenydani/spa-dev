
 <!-- comments -->
<div id="comments" v-bind:class="{ loading : loading }" >
    {% if AuthUser %}
	<div class="comment-field">
		<div class="input-field">
			<div class="input-status-wrapper">
				<input placeholder="Type your comment here" type="text" v-on:keyup.enter="postComment" class="input" ref="input">
				<div class="input-status">
					<i v-show="loading" class="fas fa-circle-notch fa-spin"></i>
				</div>
			</div>
		</div>
		<button class="button button-primary" v-on:click="postComment">post</button>
	</div>
    {% else %}
        <div class="sign-in-note">
            Please <a href="/auth">Sign in</a> to write comments.
        </div>
    {% endif %}
    <comment-tree v-bind:level="0" v-if="comments.length" v-bind:comments="comments"></comment-tree>
	<div v-else class="msg">Be the first who leaves a comment!</div>
</div>

{% verbatim %}
<script type='x-template' id='template-comment-tree'>
    <div class="comment-tree">
        <comment-tree-item
            v-if="index < limit"
            v-for="(comment,index) in model"
            v-bind:key="comment.id"
            v-bind:level="level"
            v-bind:comment="comment"
            class="comment"></comment-tree-item>

        <div class="footer" v-if="comments.length > limit">
            <button v-on:click="showMore" class="showMore">
                {{ limit === 0 ? 'Show Replies (' + comments.length + ')' : 'Show More'}}
            </button>
        </div>
    </div>
</script>
{% endverbatim %}

{% verbatim %}
<script type='x-template' id='template-comment-tree-item'>
    <div class="comment">
        <div class="content">
            <div class="profile-picture bordered" v-bind:style="{ backgroundImage: 'url(' + data.profile_picture + ')' }"></div>
            <div class="body">
                <p><a v-bind:href="'/profile/' + data.username" class="username">{{ data.username }}&nbsp;</a>{{ data.text }}</p>
                <div class="controls">
                    <div class="reply-trigger">
                    {% endverbatim %}
                    {% if AuthUser %}
                        <span v-on:click="replyForm.show = !replyForm.show">Reply</span>
                    {% endif %}
                    {% verbatim %}
                        <span v-if="hasChildren()" v-on:click="showReplies = !showReplies">
                            {{ showReplies ? 'Hide Replies' : 'Show Replies' }}
                        </span>
                    </div>
                    {% endverbatim %}
                    {% if AuthUser %}
                    <div class="reply-form" v-if="replyForm.show">
                        <input class="reply-input" v-model="replyForm.text" type="text" placeholder="Write your reply..">
                        <button v-bind:disabled="replyForm.text.length === 0" v-on:click="newReply()">Post Reply</button>
                    </div>
                    {% endif %}
                    {% verbatim %}
                </div>
            </div>
        </div>
        <comment-tree
            v-show="hasChildren && showReplies"
            v-bind:level="level + 1"
            v-bind:comments="data.ch"></comment-tree>
    </div>
</script>
{% endverbatim %}

<script type="text/javascript">

	(function(Vue){

		var ENDPOINT = '/' + '{{ model }}' + '/postComment';

		var MODEL_ID = "{{ model_id }}";

		var __COMMENTS__ = {% autoescape false %}{{ comments }}{% endautoescape %};
		// level n -> limits[n]
		var __LIMITS__ = [ 100, 20, 10, 5 ];

		var EventBus = new Vue();

		Vue.component('comment-tree', {
			template: '#template-comment-tree',
			props: ['comments', 'level'],
			data: function () {
				return {
					limit : 0,
					model: [],
				}
			},
			created: function(){
				this.model = this.comments;
				this.limit = this.levelLimit;
			},
			methods: {
				showMore: function(){
					this.limit+=2;
				},
			},
			computed: {
				levelLimit: function(){
					return __LIMITS__[this.level] ? __LIMITS__[this.level] : this.limit;
				}
			},
			watch: {
				comments: function( val ){
					this.model = val;
				}
			}
		});

		Vue.component('comment-tree-item', {
			template: '#template-comment-tree-item',
			props: ['comment','level'],
			data: function () {
				return {
					data: {
						ch: []
					},
					showReplies: true,
					replyForm: {
						show: false,
						text: '',
					  	loading : false,
					}
				}
			},
			created: function()
			{
				this.data = Object.assign(this.data, this.comment);
			},
			watch:
			{
				comment: function ( val )
				{
					this.data = Object.assign(this.data, val);
				},
			},
			methods: {
				hasChildren: function()
				{
					return this.data.ch.length > 0;
				},
				newReply: function()
				{
					if(!this.replyForm.text) return false;

					var data = { pid: this.data.id, text: this.replyForm.text };
					
					
					
					EventBus.$emit('postComment', data, function( response )
					{
						if(response)
						{
							this.data.ch.unshift(response);
							this.$emit('newReply', response);
							this.replyForm.text = '';
							this.$forceUpdate();
							this.replyForm.show = false;
						}
					}
					.bind(this));
				}
			}
		});

		new Vue({
			components: ['comment-tree', 'comment-tree-item'],
			el: '#comments',
			data: function () {
				return {
					comments: __COMMENTS__,
					loading: false
				}
			},
			methods:
			{
				postComment: function(event)
				{
					var inp = $(this.$refs['input']);

					if(!inp.val()) return false;

					var data = { pid: 0, text: inp.val() };

					EventBus.$emit('postComment', data, function( response )
					{
						if(response)
						{
							this.comments.unshift(response);
							//this.$emit('newReply', response);
							this.$forceUpdate();
							inp.val('');
						}
					}
					.bind(this));
				},
			},
			created: function()
			{
				EventBus.$on('postComment', function ( data, cb )
				{
					data.model_id = MODEL_ID;
					this.loading = true;
					$.post(ENDPOINT, data )
					  .then( function( response ) { this.loading = false; cb(response); }.bind(this))
					  .catch(function( error ) { this.loading = false; cb(false); }.bind(this))
				}
				.bind(this));
			}
		});

	}(Vue));
</script>
