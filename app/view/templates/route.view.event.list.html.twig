{% extends 'block.full.html.twig' %}

{% block content %}
    <div class="container-full route-container" id="route-view-event-list">
		<div class="container-full route-header event-list-route-header">
			<div class="body">
				<div class="container event-list-header-container">
					<h2 class="title">EVENTS</h2>
				</div>
			</div>
			<div class="bg-image" style="background-image: url(static/images/route_header.jpg)"></div>
		</div>
        {% verbatim %}
        <div class="container event-list-container infinite-list-container" id="event-list">
            <div class="infinite-search">
                <div class="info">Loaded {{ events.length }} from total {{ totalItems }} events</div>
                <div class="form">
					<input v-on:keyup.enter="search()" v-model="searchParam" placeholder="Search" type="text">
					<button v-on:click="search()">SEARCH</button>
                </div>
            </div>
            <article v-for="(event, key) in events" v-bind:key="key" class="event">
                <a v-bind:href="'/event/read/' + event.name_seo">
                  <h2 class="name">{{ event.name }}</h2>
                </a>
                <p class="text">{{ event.description }}</p>
            </article>
            <div v-if="loading" class="infinite-loading">
              <i v-if="loading" class="fas fa-4x fa-circle-notch fa-spin"></i>
			</div>
			<div v-if="totalItems > events.length" class="infinite-more">
			  There are {{ totalItems - events.length }} more events...
			</div>
        </div>
        {% endverbatim %}
    </div>

    <script type="text/javascript">

		(function(Vue){
			new Vue({
				el: '#event-list',
				data: function () {
					return {
						events: [],
						totalItems: 0,
						limit: parseInt({{ limit }}),
						startAt: 0,
					  	loading: false,
                        searchParam : ''
					}
				},
				methods: {
					bottomVisible : function()
                    {
	                    var wh = window.innerHeight;
	                    var b =  this.$el.getBoundingClientRect().bottom;
	                    var spaceBelow = wh - b;
	                    return spaceBelow > -100;
					},
					fetchData : function()
					{
						this.loading = true;

						return new Promise(function(resolve, reject)
						{
							fetch('/event/loadInfinity/?startAt=' + this.startAt + '&search=' + this.searchParam )
								.then(function(response)
								{
									if(!response.ok) throw new Error('Bad request: Unable to load events.');
									resolve(response.json());
								})
								.catch(function(error)
								{
									reject(error)
								})
								.finally(function()
								{
									this.loading = false;
								}
								.bind(this));
						}
						.bind(this));
					},
					fetchMore : function( )
					{
						return this.fetchData().then(this.handleResponse);
					},
					handleResponse : function( response )
					{
						this.totalItems = response.totalItems ? response.totalItems : 0;
						this.pushArticles( response.events || [] );
						this.startAt += this.limit;
					},
					pushArticles : function( events )
					{
						events.forEach(function( event )
						{
							this.events.push( event )
						}
						.bind(this));
					},
					search : function()
					{
						this.startAt = 0;
						this.totalItems = 0;
						this.fetchData()
							.then(function( response )
							{
								this.totalItems = response.totalItems ? response.totalItems : 0;
								this.events = response.events || [];
								this.startAt += response.events.length
							}
							.bind(this));
					}
				},
				created: function()
                {
	                this.handleResponse({{ events|raw }});

					window.addEventListener('scroll', function()
					{
						if(this.bottomVisible() === true && this.loading === false)
						{
							if(this.totalItems > this.events.length)
							{
								this.fetchMore();
							}
                        }
					}.bind(this));
				}
			});
		}(Vue));
    </script>

{% endblock %}