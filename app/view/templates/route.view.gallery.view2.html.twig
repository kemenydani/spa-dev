{% extends 'block.full.html.twig' %}

{% block content %}

<div class="container-full route-container" id="route-view-gallery-view">
	<div class="container-full route-header gallery-view-route-header">
		<div class="body">
			<div class="container gallery-header-container"><h2 class="title">{{ gallery.getName() }}</h2></div>
		</div>
		<div class="bg-image" style="background-image: url({{ headImageUrl }})"></div>
	</div>
    {% verbatim %}
    <div class="container image-list-container infinite-list-container" id="image-list">
        <div id="gallery-mosaic" class="photos" ref="photoContainer">
			<div class="photo" v-on:click="openAsCurrent" v-bind:data-id="key" v-for="(image, key) in images" v-bind:style="{ backgroundImage: 'url('+image+')' }"></div>
        </div>
        <div v-if="loading" class="infinite-loading">
		  <i v-if="loading" class="fas fa-4x fa-circle-notch fa-spin"></i>
		</div>
		<div v-if="totalItems > images.length" class="infinite-more">
		  There are {{ totalItems - images.length }} more photos...
		</div>
    </div>
    {% endverbatim %}
	
	{% verbatim %}
	<modal v-if="gallery.show" v-bind:width="'1000px'" v-bind:height="'600px'" class="gallery-modal" v-on:close="gallery.show = false" v-bind:loading="null" v-bind:loading-message="null" id="modal-image-gallery">
		<div slot="header">
			<h2>{{ gallery.name }}</h2>
		</div>
		<div slot="body" class="gallery-holder">
			<div class="prev" v-on:click="prev()">
				<i class="fa fa-4x fa-angle-left"></i>
			</div>
			<div class="currentImageHolder">
				<div class="currentImage"
				  v-show="gallery.currentImage == key"
				  v-for="(image, key) in images"
				  v-bind:style="{ 'background-image': 'url(' + image + ')' }"></div>
			</div>
			<div class="next" v-on:click="next()">
				<i class="fa fa-4x fa-angle-right"></i>
			</div>
		</div>
	</modal>
	{% endverbatim %}
	
</div>
	
{% include 'vue.component.modal.html.twig' with { width: '1000px' } %}

<script>

(function(Vue){

    new Vue({
        el: "#route-view-gallery-view",
        data: {
        	gallery : {
        		show : false,
			    currentImage : 0,
			  	name : "{{ gallery.getName() }}",
			},
        	limit : parseInt({{ limit }}),
        	loading: false,
	        galleryId : 1,
            totalItems: 0,
		  	startAt : 0,
        	images : [],
        },
        methods: {
            fetchData : function()
            {
	            this.loading = true;
	            
                return new Promise(function(resolve, reject)
                {
                    fetch('/gallery/loadInfinityImages/?galleryId=' + this.galleryId + '&startAt=' + this.startAt)
                        .then(function(response)
                        {
                        	if(!response.ok) throw new Error('Bad request: Unable to load images.');
                        	resolve(response.json());
                        })
                        .catch(function(error)
						{
                        	reject(error)
						})
					  	.finally(function()
						{
					  		this.loading = false;
					  	}
					  	.bind(this));
                }
                .bind(this));
            },
	        fetchMore : function( )
	        {
		        return this.fetchData().then(this.handleResponse);
	        },
	        handleResponse : function( response )
	        {
		        this.totalItems = response.totalItems ? response.totalItems : 0;
		        this.pushUrls( response.images || [] );
		        this.startAt += this.limit;
	        },
		  	pushUrls : function( images )
			{
				images.forEach(function( image )
				{
					this.images.push( image )
				}
				.bind(this));
			},
		  	bottomVisible : function()
			{
				var wh = window.innerHeight;
				var b =  this.$el.getBoundingClientRect().bottom;
				var spaceBelow = wh - b;
				return spaceBelow > -100;
			},
	        next : function()
	        {
		        if(this.gallery.currentImage + 1 < this.images.length)
		        {
			        this.gallery.currentImage++;
		        }
		        else
		        {
			        this.gallery.currentImage = 0;
		        }
	        },
	        prev : function()
	        {
		        if(this.gallery.currentImage === 0)
		        {
			        this.gallery.currentImage = this.images.length - 1;
		        }
		        else
		        {
			        this.gallery.currentImage--;
		        }
	        },
		  	openAsCurrent : function(event)
			{
			  	this.gallery.currentImage = event.target.getAttribute('data-id') ? event.target.getAttribute('data-id') : 0;
				this.gallery.show = true
			}
        },
        created : function()
        {
	        this.handleResponse({{ images|raw }});
		  
	        window.addEventListener('scroll', function()
	        {
		        if(this.bottomVisible() === true && this.loading === false)
		        {
			        if(this.totalItems > this.images.length)
			        {
			        	this.fetchMore();
			        }
		        }
	        }
		    .bind(this));
        }
    });

}(Vue))

</script>

{% endblock %}
